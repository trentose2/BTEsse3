swagger: '2.0'
info:
  version: '1.0'
  title: "BTEsse3"
  description: Polls is a simple API allowing consumers to view polls and vote in them.
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
host: polls.apiblueprint.org
basePath: /
schemes:
- "http"
- "https"
consumes:
- application/json
produces:
- application/json
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      parameters: []
      responses:
        default:
          description: "successful operation" 
  /user/id/{id}:
    get:
      tags:
      - "user"
      summary: "Returns a user by ID."
      description: ""
      operationId: "getUserById"
      parameters:
      - name: "id"
        in: "path"
        description: "Returns a user by ID."
        required: true
        type: "integer"
      responses: 
        200:
          description: "OK"
  /user/username/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /tasks/id/{taskId}:
    get:
      tags:
      - "task"
      summary: "Returns a task by ID."
      description: ""
      operationId: "getTaskId"
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        description: "Returns a task by ID."
        type: "integer"
      responses: 
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Task"
    put:
      tags:
      - "task"
      summary: "Updated task"
      description: ""
      operationId: "updateTask"
      parameters:
      - name: "taskId"
        in: "path"
        description: "id that need to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Updated task object"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        404:
          description: "Task not found"
    delete:
      tags:
      - "task"
      summary: "Delete task"
      description: ""
      operationId: "deleteTask"
      parameters:
      - name: "taskId"
        in: "path"
        description: "The id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "Task not found"
  /tasks/type/{type}:
    get:
      tags:
      - "task"
      summary: "Return the type of task"
      description: ""
      operationId: "getTaskType"
      parameters:
      - name: "type"
        in: "path"
        required: true
        description: "Return the type of task"
        type: "string"
      responses: 
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Task"
  /exams/{idUser}:
    get:
      tags:
      - "exam"
      summary: "Return the exams created by user"
      description: ""
      operationId: "getExams"
      parameters:
      - name: "idUser"
        in: "path"
        required: true
        description: "Return the exams created by user"
        type: "integer"
      responses: 
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Exam"
  /exams/id/{idExam}:
    get:
      tags:
      - "exam"
      summary: "Return the exam by id"
      description: ""
      operationId: "getExamById"
      parameters:
      - name: "idExam"
        in: "path"
        required: true
        description: "Return the exam by id"
        type: "integer"
      responses: 
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Exam"
    put:
      tags:
      - "exam"
      summary: "Updated exam"
      description: ""
      operationId: "updateExam"
      parameters:
      - name: "idExam"
        in: "path"
        description: "id that need to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Updated exam object"
        required: true
        schema:
          $ref: "#/definitions/Exam"
      responses:
        404:
          description: "Exam not found"
    delete:
      tags:
      - "exam"
      summary: "Delete exam"
      description: ""
      operationId: "deleteExam"
      parameters:
      - name: "idExam"
        in: "path"
        description: "The id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "Exam not found"
  /userGroup/id/{idUserGroup}:
    get:
      tags:
      - "userGroup"
      summary: "Return the user group by id"
      description: ""
      operationId: "getUserGroupById"
      parameters:
      - name: "idUserGroup"
        in: "path"
        required: true
        description: "Return the user group by id"
        type: "integer"
      responses: 
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserGroup"
    post:
      tags:
      - "userGroup"
      summary: "Update user group"
      description: ""
      operationId: "updateUserGroup"
      parameters:
      - name: "idUserGroup"
        in: "path"
        description: "id that need to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Updated user group object"
        required: true
        schema:
          $ref: "#/definitions/UserGroup"
      responses:
        404:
          description: "User group not found"
    delete:
      tags:
      - "userGroup"
      summary: "Delete user group"
      description: ""
      operationId: "deleteUserGroup"
      parameters:
      - name: "idUserGroup"
        in: "path"
        description: "The id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User group not found"
  /userGroup/id:
    put:
        tags:
        - "userGroup"
        summary: "Create user group"
        description: ""
        operationId: "createUserGroup"
        parameters:
        - in: "body"
          name: "body"
          description: "Create user group object"
          required: true
          schema:
            $ref: "#/definitions/UserGroup"
        responses:
          200:
            description: "OK"
definitions:
  User:
    type: "object"
    required:
    - "id"
    - "username"
    - "email"
    - "password"
    properties:
      id:
        type: "integer"
        format: "int64"
        minimum: 1
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
    xml:
      name: "User"
  Task:
    type: "object"
    required:
    - "id"
    - "type"
    - "request"
    - "response"
    properties:
      id:
        type: "integer"
        format: "int64"
      type:
        type: "string"
      request:
        type: "string"
      response:
        type: "string"
    xml:
      name: "Task"
  Exam:
    type: "object"
    required:
    - "id"
    - "valutation"
    - "tasks"
    properties:
      id:
        type: "integer"
        format: "int64"
      valutation:
        type: "integer"
        format: "int64"
      tasks:
        type: "array"
        xml:
          name: "tasks"
          wrapped: true
        items:
          $ref: "#/definitions/Task"
    xml:
      name: "TaskGroup"
  UserGroup:
    type: "object"
    required:
    - "id"
    - "users"
    properties:
      id:
        type: "integer"
        format: "int64"
      users:
        type: "array"
        xml:
          name: "users"
          wrapped: true
        items:
          $ref: "#/definitions/User"
    xml:
      name: "UserGroup"

